Testar todos os ENDPOINTS com sucesso

****************************
# --- Configurações da API ---
$baseUrl = "http://localhost:8080"

# Chave HMAC em Base64 fornecida pelo utilizador
$hmacSecretBase64 = "v0ggs5DQqRPs7/sGSFKBhsaKZx5eb5eYVS3uYjZH+mU="

# --- Funções Auxiliares ---
function Convert-ToBase64UrlSafe {
    param(
        [Parameter(Mandatory=$true)]
        [byte[]]$Bytes
    )
    $base64 = [System.Convert]::ToBase64String($Bytes)
    return $base64.TrimEnd('=').Replace('+', '-').Replace('/', '_')
}

# --- Início dos Testes ---
Write-Host "--- Iniciando Testes da API ---" -ForegroundColor Yellow
$ErrorActionPreference = "Stop" 

try {
    # --- 1. Teste de Criação de Usuário ---
    Write-Host "`n[TESTE 1] Criando um novo usuário..." -ForegroundColor Cyan
    $randomId = Get-Random -Minimum 1000 -Maximum 9999
    $userEmail = "teste$randomId@exemplo.com"
    $userName = "Usuario Teste $randomId"
    $userPassword = "Password@123"
    $createUserBody = @{ user_name = $userName; user_email = $userEmail; user_password = $userPassword } | ConvertTo-Json -Compress
    $createUserResponse = Invoke-RestMethod -Uri "$baseUrl/users/create" -Method Post -Body $createUserBody -ContentType "application/json"
    Write-Host "SUCESSO: Usuário criado:" -ForegroundColor Green
    $createUserResponse | ConvertTo-Json -Depth 3 | Write-Output
    $createdUserId = $createUserResponse.ID

    # --- 2. Teste de Login ---
    Write-Host "`n[TESTE 2] Realizando login..." -ForegroundColor Cyan
    $loginBody = @{ user_email = $userEmail; user_password = $userPassword } | ConvertTo-Json -Compress
    $loginResponse = Invoke-RestMethod -Uri "$baseUrl/users/login" -Method Post -Body $loginBody -ContentType "application/json"
    Write-Host "SUCESSO: Login realizado:" -ForegroundColor Green
    $loginResponse | ConvertTo-Json | Write-Output
    $userIdFromLogin = $loginResponse.user_id

    # --- 3. Teste da Rota Autenticada ---
    Write-Host "`n[TESTE 3] Acessando rota protegida (/users/get)..." -ForegroundColor Cyan
    $method = "POST"
    $path = "/users/get"
    $timestamp = [System.DateTimeOffset]::UtcNow.ToUnixTimeSeconds()
    $nonce = [System.Guid]::NewGuid().ToString()
    $getUserBody = @{ user_id = $userIdFromLogin } | ConvertTo-Json -Compress
    $message = "${method}:${path}:${timestamp}:${getUserBody}:${nonce}"
    Write-Host "Mensagem para assinar: $message"

    # Descodificar a chave Base64 para obter os bytes secretos
    $hmacKeyBytes = [System.Convert]::FromBase64String($hmacSecretBase64)
    
    # Usar os bytes descodificados para gerar a assinatura
    $messageBytes = [System.Text.Encoding]::UTF8.GetBytes($message)
    $hmac = New-Object System.Security.Cryptography.HMACSHA256
    $hmac.Key = $hmacKeyBytes
    $signatureBytes = $hmac.ComputeHash($messageBytes)
    $signature = Convert-ToBase64UrlSafe -Bytes $signatureBytes
    Write-Host "Assinatura Gerada: $signature"

    $headers = @{
        "X-Timestamp"   = $timestamp.ToString()
        "Authorization" = $signature
        "X-Nonce"       = $nonce
        "X-User-ID"     = $userIdFromLogin.ToString()
    }

    $getUserResponse = Invoke-RestMethod -Uri "$baseUrl/users/get" -Method Post -Headers $headers -Body $getUserBody -ContentType "application/json"
    Write-Host "SUCESSO: Dados do usuário obtidos:" -ForegroundColor Green
    $getUserResponse | ConvertTo-Json -Depth 3 | Write-Output
    Write-Host "`n--- Testes Finalizados com Sucesso ---" -ForegroundColor Green

} catch {
    Write-Host "`n--- Ocorreu um ERRO durante os testes ---" -ForegroundColor Red
    if ($_.Exception.Response) {
        $statusCode = [int]$_.Exception.Response.StatusCode
        Write-Host "Status Code: $statusCode ($($_.Exception.Response.StatusDescription))" -ForegroundColor Yellow
        $errorResponseStream = $_.Exception.Response.GetResponseStream()
        $streamReader = New-Object System.IO.StreamReader($errorResponseStream)
        $errorBody = $streamReader.ReadToEnd()
        $streamReader.Close()
        Write-Host "Corpo da Resposta de Erro da API:"
        try {
            $errorBody | ConvertFrom-Json | ConvertTo-Json -Depth 5 | Write-Host -ForegroundColor Cyan
        } catch {
            Write-Host $errorBody -ForegroundColor Cyan
        }
    } else {
        Write-Host "Não foi possível conectar à API. Verifique se ela está em execução no endereço $baseUrl." -ForegroundColor Red
        Write-Host "Detalhes do erro do PowerShell:"
        $_ | Select-Object * | Format-List | Out-String | Write-Host -ForegroundColor Yellow
    }
}

Read-Host -Prompt "Pressione Enter para sair"
***************************


